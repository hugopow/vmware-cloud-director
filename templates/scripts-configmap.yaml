apiVersion: v1
kind: ConfigMap
metadata:
  name: scripts-configmap
data:
  run-vcd.sh: |-
    #!/bin/sh
    # Script to run VMware Cloud Director as a container, use at your own risk, no support is given.

    # Update repositories
    #cd /etc/yum.repos.d/
    #sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-*
    #sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*

    # Update CentOS
    #yum update -y

    # Install VCD pre-requisite packages
    #yum install alsa-lib bash chkconfig coreutils findutils glibc grep initscripts krb5-libs libgcc libICE libSM libstdc++ libX11 libXau libXdmcp libXext libXi libXt libXtst module-init-tools net-tools pciutils procps redhat-lsb sed tar wget which -y --allowerasing

    # Install VMware public keys
    #echo "Install VMware public keys"
    #cd /home
    #wget https://packages.vmware.com/tools/keys/VMWARE-PACKAGING-GPG-RSA-KEY.pub
    #rpm --import /home/VMWARE-PACKAGING-GPG-RSA-KEY.pub
    
    # Install nodejs and git to use vmw-cli with my.vmware.com
    #echo "Install nodejs and git to use vmw-cli with my.vmware.com"
    #dnf module install nodejs:14 -y
    #yum install -y git
    #
    # Install vmw-sdk
    #npm install https://github.com/hugopow/vmw-sdk.git --global
    
    # Instal vmw-cli
    #npm install https://github.com/hugopow/vmw-cli.git --global

    # Export my.vmware.com credentials for vmw-cli to use
    #export VMWUSER='{{ .Values.myVmware.vmwUser }}'
    #export VMWPASS='{{ .Values.myVmware.vmwPass }}'

    # Download VMware Cloud Director Linux Binary
    #vmw-cli ls vmware_cloud_director
    #echo "Download vmware-vcloud-director-distribution-10.3.2-19375095.bin"
    #vmw-cli cp vmware-vcloud-director-distribution-10.3.2-19375095.bin

    # Make VCD package executable
    echo "Make VCD package executable"
    chmod u+x /home/vmware-vcloud-director-distribution-10.3.2-19375095.bin

    # Install VCD
    echo "Install VCD"
    cd /home
    cat << EOF | ./vmware-vcloud-director-distribution-10.3.2-19375095.bin
    n
    EOF

    sleep 5

    {{- if .Values.installFirstCell.enabled }}
    # Prepare TLS certificates, must be in PEM format
    echo "Prepare TLS certificates"
    cp /tls-certs-dir/cert.pem /opt/vmware/vcloud-director/data/transfer/cert.pem
    cp /tls-key-dir/cert.key /opt/vmware/vcloud-director/data/transfer/cert.key
    chown vcloud:vcloud /opt/vmware/vcloud-director/data/transfer/cert.pem
    chown vcloud:vcloud /opt/vmware/vcloud-director/data/transfer/cert.key
    {{- end }}

    # Get IP address of pod to use when configuring VCD
    echo "Get IP address of pod to use when configuring VCD"
    ip4=$(/sbin/ip -o -4 addr list eth0 | awk '{print $4}' | cut -d/ -f1)
    echo "The IP address is"
    echo $ip4

    sleep 5

    {{- if .Values.installFirstCell.enabled }}
    # Configure VCD on first Cell
    echo "Configure VCD System"
    /opt/vmware/vcloud-director/bin/configure -ip $ip4 --primary-port-https {{ .Values.httpsService.port }} -cons $ip4 \
    --console-proxy-port-https {{ .Values.consoleProxyService.port }} -dbtype postgres -dbhost {{ .Values.postgresql.dbHost }} -dbname {{ .Values.postgresql.dbName }} \
    -dbuser {{ .Values.postgresql.dbUser }} -dbpassword {{ .Values.postgresql.dbPassword }} --cert /opt/vmware/vcloud-director/data/transfer/cert.pem --key /opt/vmware/vcloud-director/data/transfer/cert.key \
    --key-password "" --enable-ceip false -unattended
    sleep 5
    {{- end }}

    {{- if .Values.installAdditionalCell.enabled }}
    # Configure VCD on an additional cell
    echo "Configure VCD"
    /opt/vmware/vcloud-director/bin/configure -ip $ip4 --primary-port-https {{ .Values.httpsService.port }} -cons $ip4 \
    --console-proxy-port-https {{ .Values.consoleProxyService.port }} -r /opt/vmware/vcloud-director/data/transfer/responses.properties --enable-ceip false -unattended
    sleep 5
    {{- end }}

    # Start VCD services
    echo "Start VCD Services"
    service vmware-vcd start

    # Wait for VCD to start
    echo "Waiting for VCD services to start for 100 seconds"
    sleep 100

    {{- if .Values.installFirstCell.enabled }}
    # Configure VCD System
    echo "Configure VCD System"
    /opt/vmware/vcloud-director/bin/cell-management-tool system-setup \
    --user {{ .Values.vcdSystem.user }} --password  '{{ .Values.vcdSystem.password }}' --full-name "VCD System Administrator" \
    --email {{ .Values.vcdSystem.email }} -system-name {{ .Values.vcdSystem.systemName }} --installation-id {{ .Values.vcdSystem.installationId }} --unattended

    # Setup VCD Public Addresses
    echo "Setup VCD Public Addresses"
    cd /opt/vmware/vcloud-director/bin
    ./cell-management-tool manage-config -n ui.baseUri -v "{{ .Values.publicAddress.uiBaseUri }}"
    ./cell-management-tool manage-config -n ui.baseHttpUri -v "{{ .Values.publicAddress.uiBaseHttpUri }}"
    ./cell-management-tool manage-config -n restapi.baseUri -v "{{ .Values.publicAddress.restapiBaseUri }}"
    ./cell-management-tool manage-config -n restapi.baseHttpUri -v "{{ .Values.publicAddress.restapiBaseHttpUri }}"
    ./cell-management-tool manage-config -n consoleproxy.external.address -v "{{ .Values.publicAddress.consoleProxy }}:{{ .Values.consoleProxyService.port }}"

    # Copy responses.properties file to NFS share
    echo "Copy responses.properties file to NFS share"
    cp /opt/vmware/vcloud-director/etc/responses.properties /opt/vmware/vcloud-director/data/transfer/
    # Change file permisssions for responses.properties
    echo "Change file permisssions for responses.properties"
    chown vcloud:vcloud /opt/vmware/vcloud-director/data/transfer/responses.properties
    chmod 775 /opt/vmware/vcloud-director/data/transfer/responses.properties
    {{- end }}

    # Show VCD logs
    echo "Tailing logs"
    tail -f /opt/vmware/vcloud-director/logs/cell.log -f /opt/vmware/vcloud-director/logs/vcloud-container-debug.log
